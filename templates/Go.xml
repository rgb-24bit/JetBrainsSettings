<templateSet group="Go">
  <template name="ginkgo" value="import &#9;. &quot;github.com/onsi/ginkgo&quot;&#10;&#10;var _ = Describe(&quot;$NAME$&quot;, func() {&#10;&#9;t := GinkgoT()&#10;&#9;&#10;&#9;$END$&#10;})" description="Ginkgo test template" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO_FILE" value="true" />
    </context>
  </template>
  <template name="loge" value="logrus.WithContext(ctx).WithError(err).Errorf(&quot;$END$&quot;)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GO_STATEMENT" value="true" />
    </context>
  </template>
  <template name="logw" value="logrus.WithContext(ctx).WithError(err).Warnf(&quot;$END$&quot;)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GO_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iferr" value="if err != nil {&#10;    $END$&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GO_STATEMENT" value="true" />
    </context>
  </template>
  <template name="dtest" value="mockSaaS(&quot;$METHOD$&quot;, &amp;saas.$METHOD$Response{}, terr)&#10;_, err := mockSaaSClient.$DO$(ctx, &quot;&quot;, &quot;&quot;, 2)&#10;assert.EqualError(t, err, terr.Error())&#10;&#10;mockSaaS(&quot;$METHOD$&quot;, &amp;saas.$METHOD$Response{&#10;&#9;BaseResp: &amp;base.BaseResp{StatusCode: 1},&#10;}, nil)&#10;_, err = mockSaaSClient.$DO$(ctx, &quot;&quot;, &quot;&quot;, 2)&#10;assert.NotNil(t, err)&#10;&#10;mockSaaS(&quot;$METHOD$&quot;, &amp;saas.$METHOD$Response{&#10;&#9;BaseResp: &amp;base.BaseResp{StatusCode: 0},&#10;}, nil)&#10;res, err := mockSaaSClient.$DO$(ctx, &quot;&quot;, &quot;&quot;, 2)&#10;assert.NotNil(t, res)&#10;assert.Nil(t, err)" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DO" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>